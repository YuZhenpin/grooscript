apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'codenarc'

group = 'org.grooscript'
version = '0.5-SNAPSHOT'

sourceCompatibility = 1.6

def appName = 'grooscript'

repositories {
    mavenCentral()
}

codenarc.configFile = new File('config/codenarc.groovy')
[codenarcMain, codenarcTest]*.ignoreFailures = true

dependencies {
    //compile 'org.codehaus.groovy:groovy:2.1.6'
    compile 'org.codehaus.groovy:groovy:2.3.0-rc-2'
    //runtime 'commons-cli:commons-cli:1.2'
    runtime 'org.apache.ivy:ivy:2.3.0'
    compile 'org.codehaus.gpars:gpars:1.1.0'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }
    //testCompile 'org.codehaus.groovy:groovy-test:2.1.6'
    testCompile 'org.codehaus.groovy:groovy-test:2.3.0-rc-2'
    codenarc 'org.codenarc:CodeNarc:0.21'
}

jar {
    manifest {
        attributes("Implementation-Title": appName, "Implementation-Version": version)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

//Sonar repository stuff
/*task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
 
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
	archives javadocJar
    archives sourcesJar
}
	
signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
 
            pom.project {
               name 'GrooScript'
               packaging 'jar'
               description 'GrooScript converts your groovy code to javascript'
               url 'http://grooscript.org/'
 
               scm {
                   url 'scm:git@github.com:chiquitinxx/grooscript.git'
                   connection 'scm:git@github.com:chiquitinxx/grooscript.git'
                   developerConnection 'scm:git@github.com:chiquitinxx/grooscript.git'
               }
 
               licenses {
                   license {
                       name 'The Apache Software License, Version 2.0'
                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                       distribution 'repo'
                   }
               }
 
               developers {
                   developer {
                       id 'chiquitinxx'
                       name 'Jorge Franco'
                   }
               }
           }
        }
    }
}*/
//End Sonar

task testUnit(type: Test) {
    exclude 'org/grooscript/asts/TestPhantom*'
    exclude 'org/grooscript/daemon/**'
    exclude 'org/grooscript/jquery/TestFunctional*'
    exclude 'org/grooscript/builder/TestFunctional*'
}

testUnit.description = 'Run only conversion tests'

task testJsConversions(type: org.grooscript.gradle.TestMochaTask) {
    file = 'src/test/js/test.js'
}

testJsConversions.description = 'Run mocha javascript tests'

test.dependsOn testJsConversions

task uglifyGrooscript(type: org.grooscript.gradle.UglifyJsTask) {
    source = 'src/main/resources/META-INF/resources/grooscript.js'
    destination = 'src/main/resources/META-INF/resources/grooscript.min.js'
}

uglifyGrooscript.description = 'Compress grooscript.js to grooscript.min.js'

test.dependsOn uglifyGrooscript