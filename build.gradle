apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'codenarc'

group = 'org.grooscript'
version = '0.4.3'

sourceCompatibility = 1.6

def appName = 'grooscript'
def webDir = '../grooscript_web'
def webDirJar = "$webDir/lib"
def webDirJs = "$webDir/web-app/js/"

repositories {
    mavenCentral()
}

codenarc.configFile = new File('config/codenarc.groovy')
[codenarcMain, codenarcTest]*.ignoreFailures = true

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.1.6'
    compile group: 'org.codehaus.gpars', name: 'gpars', version: '1.0.0'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    codenarc 'org.codenarc:CodeNarc:0.20'
}

jar {
    manifest {
        attributes("Implementation-Title": appName, "Implementation-Version": version)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

//Sonar repository stuff
/*task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
 
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
	archives javadocJar
    archives sourcesJar
}
	
signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
 
            pom.project {
               name 'GrooScript'
               packaging 'jar'
               description 'GrooScript converts your groovy code to javascript'
               url 'http://grooscript.org/'
 
               scm {
                   url 'scm:git@github.com:chiquitinxx/grooscript.git'
                   connection 'scm:git@github.com:chiquitinxx/grooscript.git'
                   developerConnection 'scm:git@github.com:chiquitinxx/grooscript.git'
               }
 
               licenses {
                   license {
                       name 'The Apache Software License, Version 2.0'
                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                       distribution 'repo'
                   }
               }
 
               developers {
                   developer {
                       id 'chiquitinxx'
                       name 'Jorge Franco'
                   }
               }
           }
        }
    }
}*/
//End Sonar

//Copy jar, js file, and examples to web directory, defined at start
task copyToGrooscriptWeb() << {
	println "Copying $appName jar to $webDirJar ..."
	copy {
		into "$webDirJar"
		from "build/libs"
		include "**/*.jar"
		rename {
			return "grooscript-${version}.jar"
		}
	}
	
	println "Copying $appName jsFiles to $webDirJs ..."
	copy {
		into "$webDirJs"
		from "src/main/resources/META-INF/resources"
		include "grooscript.js"
	}
}

copyToGrooscriptWeb.description = 'Copy grooscript jar and js files to web project'

task testUnit(type: Test) {
    exclude 'org/grooscript/asts/TestPhantom*'
    exclude 'org/grooscript/daemon/**'
}

testUnit.description = 'Run only conversion tests'

task testJsConversions(type: TestMochaTask) {
    file = 'src/test/js/test.js'
}

testJsConversions.description = 'Run mocha javascript tests'

test.dependsOn testJsConversions

import groovy.json.JsonSlurper

class TestMochaTask extends DefaultTask {

    String file

    private runTest() {
        def result = "mocha -R json ${file}".execute()
        def failures = 0
        def success = 0
        def messageError = ''
        def returnCode
        try {
            result.waitFor()
            returnCode = result.exitValue()

            (failures, success) = processJson(result, returnCode, messageError, failures, success)
        } catch (e) {
            failures = 1
            try {
                messageError += " Error executing mocha, return code: ${returnCode}\n"
                messageError += " stderr: ${result.err.text}\n"
                messageError += " stdout: ${result?.in?.text}\n"
            } catch (ex) {
            }
        }

        decideResult(failures, messageError, success)
    }

    private List processJson(Process result, int returnCode, messageError, int failures, int success) {
        def slurper = new JsonSlurper()
        def json = slurper.parseText(result.in.text)
        if (returnCode == 0) {
            success = json.stats.passes
        } else {
            failures = json.stats.failures
            json.failures.each {
                messageError += " Fail: ${it.fullTitle}.${it.title} \n"
            }
        }
        [failures, success]
    }

    private void decideResult(failures, messageError, success) {
        if (failures > 0) {
            throw new GradleException("Mocha tests failed: ${failures}\n${messageError}")
        } else {
            if (success == 0) {
                throw new GradleException('0 tests executed.')
            } else {
                println "${success} mocha tests success."
            }
        }
    }

    @TaskAction
    def testMocha() {
        if (!file) {
            throw new GradleException("Need define file parameter, test file to test with mocha.")
        } else {
            runTest()
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.codehaus.groovy', name: 'groovy', version: '2.1.6'
        classpath files("$buildDir/classes/main")
    }
}

task generateBuilderJs(dependsOn: compileGroovy) << {
    org.grooscript.GrooScript.setConversionProperty('initialText','//This script needs grooscript.js to run')
    org.grooscript.GrooScript.convert('./src/main/groovy/org/grooscript/builder/Builder.groovy',
            './src/main/resources/META-INF/resources')
}

task renameBuilderJs(dependsOn: generateBuilderJs, type: Copy) {
    from 'src/main/resources/META-INF/resources/Builder.js'
    into 'src/main/resources/META-INF/resources'
    rename { String fileName ->
        fileName.replace('Builder', 'grooscript-builder')
    }
}

task deleteBuilderJs(dependsOn: renameBuilderJs, type: Delete) {
    delete 'src/main/resources/META-INF/resources/Builder.js'
}


task testJsBuilder(dependsOn: deleteBuilderJs, type: TestMochaTask) {
    file = 'src/test/js/testBuilder.js'
}

task generateGrooscriptBuilderJs(dependsOn: testJsBuilder) << {
    org.grooscript.util.GsConsole.info 'Generated grooscript-builder.js'
}

generateGrooscriptBuilderJs.description = 'Generate grooscript-builder.js file'